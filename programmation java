l'utilisation de findElement(By. X );
on choisis X par priorité suivante:
        id
        name
        classname
        tagname
        cssSelector
        linkText
        partialLinkText
        xpath
	
pour travailler avec excel en utilisant selenium, il dois y avoir APACHE POI pour la gestion, selenium seul n'est pas fait pour.
un exemple de code pour la recuperation des données sous excel:

--------------------------------------------------------------------------------------------------------------------------------

	@DataProvider(name="testdata)
	public Object[][] TestDataFeed()
	{
		ExcelDataFile config = new ExcelDataFile("C:\\Users\\.....\LoginCredentials.xlsx");
		int rows = config.getRowCount(0);
		Object[][] credentials= new Object[rows][2];
		for (int i=0; i<rows;i++)
		{
			credentials[i][0]= config.getData(0,i,0);
			credentials[i][1]= config.getData(0,i,1);
		}return credentials;
	}
 
 --------------------------------------------------------------------------------------------------------------------------------

Browser Element & its Operations:
Browser: launch browser, Navigate to specified Url, Refresh, Close browser.
Page: Return page title, return page Url
Link: Click the link, check the existence, check enabled status
Button: Click the button, check displayed status, enabled status, return button name.
Image: Return image title, download/upload image, click image link.
Text Area/ Error Message: Send keys/text, grab and return text
Radi button/ Check box: Check displaye status/enable status/select/unselect.
Drop down box/ List box/ Combo box: Check display status/ enable status/ select item
Frame: Switch from top window to specified frame, Frame to top windows.
Web table/HTML table: Return specified cell value, Return row count, column count.



Comands to locate web element:
By ID
	driver.findElement(By.id("xxx"));
	driver.findElement(By.id("Content-1")).sendKeys("1887");
By Name
	driver.findElement(By.name("xxx"));
	driver.findElement(By.name("Email")).sendKeys(abc@gmail.com);
By Class Name
	driver.findElement(By.className("xxx"));
	driver.findElement(By.className("Country")).sendKeys("France");
By Tag Name
By Kink Text
By Partial Link Text
By xpath
By Css
        driver.findElement(By.cssSelector("xxx"));
	driver.findElement(By.cssSelector("#next")).click();

   
   *                        *                           *

Get Commands:
  Get: 
    this function is used to open a specified URL int the browser window
    syntax: driver.get("URL");
    exp: driver.get("https://www.google.com");
    
  Get title:
    this function is used to get the title of the current page in the browser
    syntax: driver.getTitle();
    
  Get Page Source:
    this function is used to get the source code of the current page
    syntax: driver.getPageSource();
    
  Get Current URL:
    this function is used to get the URL of the current page in the browser.
    syntax: driver.getCurrentUrl();

exp de code:


--------------------------------------------------------------------------------------------------------------------------------
package Newpack;

import java.util.concurrent.TimeUnit;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;


public class Day1 {
	WebDriver driver;
	
	public void invokeBrowser() {
		
		try {
			System.setProperty("webdriver.chrome.driver", "C:\\Users\\leila 2\\Downloads\\chromedriver_win32\\chromedriver.exe");
			driver = new ChromeDriver();
			driver.manage().deleteAllCookies();
			driver.manage().window().maximize();
			driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
			getCommands();
		catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	
	
	public void getCommands() {
		try {
			driver.get("http://amazon.fr");
			String titleOfThePage = driver.getTitle();
			System.out.println("Title of the page is:"+ titleOfThePage);
			driver.findElement(By.linkText("Ventes Flash")).click();
			String currentUrl = driver.getCurrentUrl();
			System.out.println("Thr current Url is:"+ currentUrl);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	
	public static void main(String[] args) {
	 Day1 myObj = new Day1();
	 myObj.invokeBrowser();

	}

}

--------------------------------------------------------------------------------------------------------------------------------

Navigate Commands:
	Navigate To:
		this function is used to navigate to a new page in the current browser window.
		syntax: driver.navigate().to("URL");
		exp: driver.navigate().to("https://www.google.com");
		
	Navigate Refresh:
		this function is used to refresh the current page in the browser window.
		syntax: driver.navigate().refresh();
		
	Navigate Back:
		this function is used to navigate to the previously visited page in the current windw.
		syntax: driver.navigate().back();
		
	Navigate Forward:
		this function is used to navigate to the web page visited after the current page in the browser history.
		syntax: driver.navigate().forward();
exp de code a ajouter a la suite du premier et faire appel seul:

--------------------------------------------------------------------------------------------------------------------------------
public void navigateCommands() {
		try {
			driver.navigate().to("http://amazon.fr");
			driver.findElement(By.linkText("Ventes Flash")).click();
			Thread.sleep(2000);
			driver.navigate().back();
			Thread.sleep(2000);
			driver.navigate().forward();
			Thread.sleep(2000);
			driver.navigate().refresh();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		
	}
	
--------------------------------------------------------------------------------------------------------------------------------

Other Browser Commands:
	Close:
		this command is used to close the current page in the browser window.
		syntax: driver.close();
		
	Quit:
		this function is used to quit the browser window.
		syntax: driver.quit();
		
		
Other Commands:
	findElement Command:
		this command is used to find elements/ objects on a web page.
		exp: driver.findElement(By.name("google"));
		
	sendKeys Command:
		this command is used to click on an element/ object on the web page.
		exp: driver.findElement(By.id("Content-1")).sendKeys("18776");
		
	click Command:
		this command is used to click on an element/object on the web page.
		exp: driver.findElement(By.linText("Youtube")).click();
		
		
		
*********************************************************************************************************************************
                                                         Types of Waits
*********************************************************************************************************************************

Implicit wait:
	In implicit wait, we can tell Selenium that we would like to wait for a certain amount of time before throwing an exception that it cannot find.
	Syntax:
		driver.manager().timeouts().implicitlyWait(TimeOut, TimeUnit.SECONDS);
	exp: driver.manager().timeouts().implicitlyWait(40,TimeUnit, SECONDS);
	
Explicit Wait:
	The explicit wait is used to tell the Web Driver to wait for certain conditions (Exected Conditions) or the maximum time exceeded before throwing an "ElementNotVisibleException" exception.
	Syntax:
		WebDriverWait wait = new WebDriverWait(WebDriverReference, TimeOut);
	
Fluent Wait:
	The fluent wait is used to tell the web driver to wait for a codition, as well as the frequency with which we want to check to cpndition before throwing an "ElementNotVisibleException" exception.
	Syntax:
		Wait wait= new FluentWait(WebDriver reference).withTimeout(timeout, SECONDS). pollingEvery(timeout,SECONDS).ignoring(Exception class);
		
	
	
	
